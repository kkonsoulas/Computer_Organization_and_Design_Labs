$date
	Wed Dec 15 13:47:04 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module cpu0 $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 32 $ wRegData [31:0] $end
$var wire 1 % temp_RegWrite $end
$var wire 1 & temp_MemWrite $end
$var wire 1 ' sll_sig $end
$var wire 32 ( signExtend [31:0] $end
$var wire 32 ) rdB [31:0] $end
$var wire 32 * rdA [31:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 5 , instr_rt [4:0] $end
$var wire 5 - instr_rs [4:0] $end
$var wire 5 . instr_rd [4:0] $end
$var wire 32 / instr [31:0] $end
$var wire 16 0 imm [15:0] $end
$var wire 6 1 func [5:0] $end
$var wire 2 2 bypassB [1:0] $end
$var wire 2 3 bypassA [1:0] $end
$var wire 1 4 Zero $end
$var wire 32 5 ShmtExtend [31:0] $end
$var wire 5 6 Shmt [4:0] $end
$var wire 5 7 RegWriteAddr [4:0] $end
$var wire 1 8 RegWrite $end
$var wire 1 9 RegDst $end
$var wire 1 : PCWrite $end
$var wire 1 ; MemWrite $end
$var wire 1 < MemToReg $end
$var wire 1 = MemRead $end
$var wire 1 > IF_DWrite $end
$var wire 1 ? IF_CTRL_MUX $end
$var wire 32 @ DMemOut [31:0] $end
$var wire 1 A Branch $end
$var wire 2 B ALUcntrl [1:0] $end
$var wire 1 C ALUSrc $end
$var wire 32 D ALUOut [31:0] $end
$var wire 4 E ALUOp [3:0] $end
$var wire 32 F ALUInB [31:0] $end
$var wire 32 G ALUInA [31:0] $end
$var reg 32 H EXMEM_ALUOut [31:0] $end
$var reg 1 I EXMEM_Branch $end
$var reg 1 J EXMEM_MemRead $end
$var reg 1 K EXMEM_MemToReg $end
$var reg 1 L EXMEM_MemWrite $end
$var reg 32 M EXMEM_MemWriteData [31:0] $end
$var reg 1 N EXMEM_RegWrite $end
$var reg 5 O EXMEM_RegWriteAddr [4:0] $end
$var reg 1 P EXMEM_Zero $end
$var reg 1 Q IDEX_ALUSrc $end
$var reg 2 R IDEX_ALUcntrl [1:0] $end
$var reg 1 S IDEX_Branch $end
$var reg 1 T IDEX_MemRead $end
$var reg 1 U IDEX_MemToReg $end
$var reg 1 V IDEX_MemWrite $end
$var reg 1 W IDEX_RegDst $end
$var reg 1 X IDEX_RegWrite $end
$var reg 5 Y IDEX_instr_rd [4:0] $end
$var reg 5 Z IDEX_instr_rs [4:0] $end
$var reg 5 [ IDEX_instr_rt [4:0] $end
$var reg 32 \ IDEX_rdA [31:0] $end
$var reg 32 ] IDEX_rdB [31:0] $end
$var reg 32 ^ IDEX_signExtend [31:0] $end
$var reg 32 _ IFID_PCplus4 [31:0] $end
$var reg 32 ` IFID_instr [31:0] $end
$var reg 32 a MEMWB_ALUOut [31:0] $end
$var reg 32 b MEMWB_DMemOut [31:0] $end
$var reg 1 c MEMWB_MemToReg $end
$var reg 1 d MEMWB_RegWrite $end
$var reg 5 e MEMWB_RegWriteAddr [4:0] $end
$var reg 32 f PC [31:0] $end
$scope module control_alu $end
$var wire 2 g ALUcntrl [1:0] $end
$var wire 6 h func [5:0] $end
$var reg 4 i ALUOp [3:0] $end
$var reg 1 ' sll_sig $end
$upscope $end
$scope module control_main $end
$var wire 6 j opcode [5:0] $end
$var reg 1 C ALUSrc $end
$var reg 2 k ALUcntrl [1:0] $end
$var reg 1 A Branch $end
$var reg 1 = MemRead $end
$var reg 1 < MemToReg $end
$var reg 1 & MemWrite $end
$var reg 1 9 RegDst $end
$var reg 1 % RegWrite $end
$upscope $end
$scope module cpu_DMem $end
$var wire 32 l addr [31:0] $end
$var wire 1 ! clock $end
$var wire 32 m din [31:0] $end
$var wire 1 J ren $end
$var wire 1 " reset $end
$var wire 1 L wen $end
$var wire 32 n dout [31:0] $end
$upscope $end
$scope module cpu_IMem $end
$var wire 32 o addr [31:0] $end
$var wire 1 ! clock $end
$var wire 32 p din [31:0] $end
$var wire 1 q ren $end
$var wire 1 " reset $end
$var wire 1 r wen $end
$var wire 32 s dout [31:0] $end
$upscope $end
$scope module cpu_alu $end
$var wire 32 t inA [31:0] $end
$var wire 32 u inB [31:0] $end
$var wire 4 v op [3:0] $end
$var wire 1 4 zero $end
$var wire 32 w out [31:0] $end
$upscope $end
$scope module cpu_regs $end
$var wire 1 ! clock $end
$var wire 5 x raA [4:0] $end
$var wire 5 y raB [4:0] $end
$var wire 32 z rdA [31:0] $end
$var wire 32 { rdB [31:0] $end
$var wire 1 " reset $end
$var wire 5 | wa [4:0] $end
$var wire 32 } wd [31:0] $end
$var wire 1 d wen $end
$var integer 32 ~ i [31:0] $end
$upscope $end
$scope module ctrl_bypass_ex $end
$var wire 5 !" exmem_rd [4:0] $end
$var wire 1 N exmem_regwrite $end
$var wire 5 "" idex_rs [4:0] $end
$var wire 5 #" idex_rt [4:0] $end
$var wire 5 $" memwb_rd [4:0] $end
$var wire 1 d memwb_regwrite $end
$var reg 2 %" bypassA [1:0] $end
$var reg 2 &" bypassB [1:0] $end
$upscope $end
$scope module hazard_detection $end
$var wire 1 T IDEX_MemRead $end
$var wire 5 '" IDEX_rt [4:0] $end
$var wire 5 (" IFID_rs [4:0] $end
$var wire 5 )" IFID_rt [4:0] $end
$var reg 1 ? IF_CTRL_MUX $end
$var reg 1 > IF_DWrite $end
$var reg 1 : PCWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 *" \data[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 +" \data[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 ," \data[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 -" \data[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 ." \data[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 /" \data[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 0" \data[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 1" \data[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 2" \data[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 3" \data[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 4" \data[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 5" \data[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 6" \data[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 7" \data[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 8" \data[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 9" \data[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 :" \data[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 ;" \data[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 <" \data[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 =" \data[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 >" \data[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 ?" \data[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 @" \data[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 A" \data[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 B" \data[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 C" \data[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 D" \data[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 E" \data[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 F" \data[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 G" \data[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 H" \data[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 I" \data[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 J" \data[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 K" \data[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 L" \data[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 M" \data[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 N" \data[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 O" \data[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 P" \data[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 Q" \data[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 R" \data[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 S" \data[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 T" \data[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 U" \data[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 V" \data[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 W" \data[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 X" \data[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 Y" \data[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 Z" \data[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 [" \data[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 \" \data[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 ]" \data[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 ^" \data[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 _" \data[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 `" \data[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 a" \data[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 b" \data[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 c" \data[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 d" \data[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 e" \data[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 f" \data[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 g" \data[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_regs $end
$var reg 32 h" \data[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu0 $end
$scope module cpu_IMem $end
$var reg 32 i" \data[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx i"
b11111 h"
bx g"
b11110 f"
bx e"
b11101 d"
bx c"
b11100 b"
bx a"
b11011 `"
bx _"
b11010 ^"
bx ]"
b11001 \"
bx ["
b11000 Z"
bx Y"
b10111 X"
bx W"
b10110 V"
bx U"
b10101 T"
bx S"
b10100 R"
bx Q"
b10011 P"
bx O"
b10010 N"
bx M"
b10001 L"
b100010110101101111111110011100 K"
b10000 J"
b11101101001011000000000100 I"
b1111 H"
b101010001100000000 G"
b1110 F"
b10001101010000100000000000001000 E"
b1101 D"
b100010011110100000101010 C"
b1100 B"
b100000100100100000100000 A"
b1011 @"
b100010000010000000100101 ?"
b1010 >"
b10011010010000000100100 ="
b1001 <"
b10001101010000100000000000001000 ;"
b1000 :"
b10101101010111000000000000001000 9"
b111 8"
b10001101010011100000000000000100 7"
b110 6"
b10000100101001100000100100 5"
b101 4"
b1111011010111000000100101 3"
b100 2"
b1001001000100100000100010 1"
b11 0"
b10001101010011010000000000000100 /"
b10 ."
b10101101010111110000000000000100 -"
b1 ,"
b1000100000100000000100000 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b100000 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b10 v
b0 u
b0 t
bx s
0r
1q
b0 p
b111111111111111111111111111111 o
bx n
b0 m
b0 l
b10 k
b0 j
b10 i
b0 h
b0 g
b11111111111111111111111111111111 f
b0 e
0d
0c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
0X
0W
0V
0U
0T
0S
b0 R
0Q
0P
b0 O
0N
b0 M
0L
0K
0J
0I
b0 H
b0 G
b0 F
b10 E
b0 D
0C
b10 B
0A
bx @
0?
0>
0=
0<
0;
0:
19
18
b0 7
b0 6
b0 5
14
b0 3
b0 2
b0 1
b0 0
bx /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
0'
0&
1%
b0 $
b100000 #
0"
1!
$end
#5000
b11111 h"
b11110 f"
b11101 d"
b11100 b"
b11011 `"
b11010 ^"
b11001 \"
b11000 Z"
b10111 X"
b10110 V"
b10101 T"
b10100 R"
b10011 P"
b10010 N"
b10001 L"
b10000 J"
b1111 H"
b1110 F"
b1101 D"
b1100 B"
b1011 @"
b1010 >"
b1001 <"
b1000 :"
b111 8"
b110 6"
b101 4"
b100 2"
b11 0"
b10 ."
b1 ,"
b0 *"
b100000 ~
0!
#10000
1!
#15000
b11111 h"
b11110 f"
b11101 d"
b11100 b"
b11011 `"
b11010 ^"
b11001 \"
b11000 Z"
b10111 X"
b10110 V"
b10101 T"
b10100 R"
b10011 P"
b10010 N"
b10001 L"
b10000 J"
b1111 H"
b1110 F"
b1101 D"
b1100 B"
b1011 @"
b1010 >"
b1001 <"
b1000 :"
b111 8"
b110 6"
b101 4"
b100 2"
b11 0"
b10 ."
b1 ,"
b0 *"
b100000 ~
0!
#20000
1!
#25000
b11111 h"
b11110 f"
b11101 d"
b11100 b"
b11011 `"
b11010 ^"
b11001 \"
b11000 Z"
b10111 X"
b10110 V"
b10101 T"
b10100 R"
b10011 P"
b10010 N"
b10001 L"
b10000 J"
b1111 H"
b1110 F"
b1101 D"
b1100 B"
b1011 @"
b1010 >"
b1001 <"
b1000 :"
b111 8"
b110 6"
b101 4"
b100 2"
b11 0"
b10 ."
b1 ,"
b0 *"
b100000 ~
0!
#30000
1!
#35000
b11111 h"
b11110 f"
b11101 d"
b11100 b"
b11011 `"
b11010 ^"
b11001 \"
b11000 Z"
b10111 X"
b10110 V"
b10101 T"
b10100 R"
b10011 P"
b10010 N"
b10001 L"
b10000 J"
b1111 H"
b1110 F"
b1101 D"
b1100 B"
b1011 @"
b1010 >"
b1001 <"
b1000 :"
b111 8"
b110 6"
b101 4"
b100 2"
b11 0"
b10 ."
b1 ,"
b0 *"
b100000 ~
0!
#40000
14
b0 D
b0 w
b1000100000100000000100000 /
b1000100000100000000100000 s
08
b0 B
b0 k
0%
09
b0 o
bx +
bx j
bx 1
bx *
bx z
bx -
bx x
bx ("
bx )
bx {
bx ,
bx y
bx )"
bx .
bx (
bx 0
b100 E
b100 i
b100 v
1'
b0 f
bx `
b11 _
1X
b10 R
b10 g
1W
1P
bx b
1!
b11111 h"
b11110 f"
b11101 d"
b11100 b"
b11011 `"
b11010 ^"
b11001 \"
b11000 Z"
b10111 X"
b10110 V"
b10101 T"
b10100 R"
b10011 P"
b10010 N"
b10001 L"
b10000 J"
b1111 H"
b1110 F"
b1101 D"
b1100 B"
b1011 @"
b1010 >"
b1001 <"
b1000 :"
b111 8"
b110 6"
b101 4"
b100 2"
b11 0"
b10 ."
b1 ,"
b0 *"
b100000 #
1"
#45000
0!
#50000
x4
bx D
bx w
bx F
bx u
18
b10101101010111110000000000000100 /
b10101101010111110000000000000100 s
bx G
bx t
b10 B
b10 k
1%
19
b10 E
b10 i
b10 v
0'
bx 7
b0xxxxx 5
bx 6
bx h
b0 +
b0 j
b100000 1
b1000 *
b1000 z
b1000 -
b1000 x
b1000 ("
b10000 )
b10000 {
b10000 ,
b10000 y
b10000 )"
b1000 .
b100000000100000 (
b100000000100000 0
b1 o
1N
0X
b0 R
b0 g
0W
bx [
bx #"
bx '"
bx Z
bx ""
bx Y
bx ^
bx ]
bx \
b1000100000100000000100000 `
b100 _
b100 f
1!
#55000
0!
#60000
04
b11000 D
b11000 w
b10001101010011010000000000000100 /
b10001101010011010000000000000100 s
08
1;
b10000 F
b10000 u
b1000 G
b1000 t
b0 B
b0 k
0%
1C
1&
09
b10 o
b101011 +
b101011 j
b100 1
b1010 *
b1010 z
b1010 -
b1010 x
b1010 ("
b11111 )
b11111 {
b11111 ,
b11111 y
b11111 )"
b0 .
b100 (
b100 0
b1000 7
b0 5
b0 6
b100000 h
b1000 f
b10101101010111110000000000000100 `
b1000 _
1X
b10 R
b10 g
1W
b10000 [
b10000 #"
b10000 '"
b1000 Z
b1000 ""
b1000 Y
b100000000100000 ^
b10000 ]
b1000 \
0N
xP
bx M
bx m
bx O
bx !"
bx H
bx l
1d
1!
#65000
0!
#70000
b1110 D
b1110 w
b1010 G
b1010 t
18
0;
b1001001000100100000100010 /
b1001001000100100000100010 s
b100 F
b100 u
1%
1<
0&
1=
bx $
bx }
b11111 7
b100 h
b100011 +
b100011 j
b1101 )
b1101 {
b1101 ,
b1101 y
b1101 )"
b11 o
0d
bx e
bx |
bx $"
bx a
1N
0P
b10000 M
b10000 m
b1000 O
b1000 !"
b11000 H
b11000 l
0X
1V
1Q
b0 R
b0 g
0W
b11111 [
b11111 #"
b11111 '"
b1010 Z
b1010 ""
b0 Y
b100 ^
b11111 ]
b1010 \
b10001101010011010000000000000100 `
b1100 _
b1100 f
1!
#75000
0!
#80000
b1111011010111000000100101 /
b1111011010111000000100101 s
b10 B
b10 k
0C
0<
0=
19
18
b100 o
b0 +
b0 j
b100010 1
b1001 *
b1001 z
b1001 -
b1001 x
b1001 ("
b100 )
b100 {
b100 ,
b100 y
b100 )"
b1001 .
b100100000100010 (
b100100000100010 0
b1101 7
0?
0:
0>
b11000 $
b11000 }
b10000 f
b1001001000100100000100010 `
b10000 _
1X
1U
0V
1T
b1101 [
b1101 #"
b1101 '"
b1101 ]
0N
1L
b11111 M
b11111 m
b11111 O
b11111 !"
b1110 H
b1110 l
1d
b1000 e
b1000 |
b1000 $"
b11000 a
1!
#85000
b11000 :"
0!
#90000
04
b101 D
b101 w
b11111 @
b11111 n
b1001 G
b1001 t
b10000100101001100000100100 /
b10000100101001100000100100 s
b1110 $
b1110 }
b110 E
b110 i
b110 v
b1001 7
b100 F
b100 u
b100010 h
b100101 1
b1111 *
b1111 z
b1111 -
b1111 x
b1111 ("
b1101 )
b1101 {
b1101 ,
b1101 y
b1101 )"
b1110 .
b111000000100101 (
b111000000100101 0
b101 o
0d
b11111 e
b11111 |
b11111 $"
b1110 a
1N
1K
0L
1J
b1101 M
b1101 m
b1101 O
b1101 !"
0U
0T
0Q
b10 R
b10 g
1W
b100 [
b100 #"
b100 '"
b1001 Z
b1001 ""
b1001 Y
b100100000100010 ^
b100 ]
b1001 \
b1111011010111000000100101 `
b10100 _
b10100 f
1!
#95000
0!
#100000
b11111 D
b11111 w
b10001101010011100000000000000100 /
b10001101010011100000000000000100 s
b11111 F
b11111 u
b1111 G
b1111 t
b1 E
b1 i
b1 v
bx @
bx n
b11111 $
b11111 }
b110 o
b100100 1
b10000 *
b10000 z
b10000 -
b10000 x
b10000 ("
b10010 )
b10010 {
b10010 ,
b10010 y
b10010 )"
b10011 .
b11111111111111111001100000100100 (
b1001100000100100 0
b1110 7
b100101 h
b1 2
b1 &"
b11000 f
b10000100101001100000100100 `
b11000 _
b1101 [
b1101 #"
b1101 '"
b1111 Z
b1111 ""
b1110 Y
b111000000100101 ^
b1101 ]
b1111 \
0K
0J
b100 M
b100 m
b1001 O
b1001 !"
b101 H
b101 l
1d
1c
b1101 e
b1101 |
b1101 $"
b11111 b
1!
#105000
b11111 D"
0!
#110000
b10010 F
b10010 u
b10000 D
b10000 w
b10000 G
b10000 t
b10101101010111000000000000001000 /
b10101101010111000000000000001000 s
b0 E
b0 i
b0 v
b0 B
b0 k
1C
1<
1=
09
b101 $
b101 }
b0 2
b0 &"
b10011 7
b100100 h
b100011 +
b100011 j
b100 1
b1010 *
b1010 z
b1010 -
b1010 x
b1010 ("
b1110 )
b1110 {
b1110 ,
b1110 y
b1110 )"
b0 .
b100 (
b100 0
b111 o
0c
b1001 e
b1001 |
b1001 $"
b101 a
bx b
b1101 M
b1101 m
b1110 O
b1110 !"
b11111 H
b11111 l
b10010 [
b10010 #"
b10010 '"
b10000 Z
b10000 ""
b10011 Y
b11111111111111111001100000100100 ^
b10010 ]
b10000 \
b10001101010011100000000000000100 `
b11100 _
b11100 f
1!
#115000
b101 <"
0!
#120000
b10001101010000100000000000001000 /
b10001101010000100000000000001000 s
1;
b1010 G
b1010 t
0%
0<
1&
0=
b100 F
b100 u
04
b1110 D
b1110 w
08
b1000 o
b101011 +
b101011 j
b1000 1
b11100 )
b11100 {
b11100 ,
b11100 y
b11100 )"
b1000 (
b1000 0
b10 E
b10 i
b10 v
0?
0:
0>
b1110 7
b100 h
b1 2
b1 &"
b11111 $
b11111 }
b100000 f
b10101101010111000000000000001000 `
b100000 _
1U
1T
1Q
b0 R
b0 g
0W
b1110 [
b1110 #"
b1110 '"
b1010 Z
b1010 ""
b0 Y
b100 ^
b1110 ]
b1010 \
b10010 M
b10010 m
b10011 O
b10011 !"
b10000 H
b10000 l
b1110 e
b1110 |
b1110 $"
b11111 a
1!
#125000
b11111 F"
0!
#130000
b10010 D
b10010 w
b11111 @
b11111 n
18
0;
b10011010010000000100100 /
b10011010010000000100100 s
1%
1<
0&
1=
b10000 $
b10000 }
b11100 7
b0 2
b0 &"
b1000 F
b1000 u
b1000 h
b100011 +
b100011 j
b10 )
b10 {
b10 ,
b10 y
b10 )"
b1001 o
b10011 e
b10011 |
b10011 $"
b10000 a
1K
1J
b1110 M
b1110 m
b1110 O
b1110 !"
b1110 H
b1110 l
0X
0U
1V
0T
b11100 [
b11100 #"
b11100 '"
b1000 ^
b11100 ]
b10001101010000100000000000001000 `
b100100 _
b100100 f
1!
#135000
b10000 P"
0!
#140000
b100010000010000000100101 /
b100010000010000000100101 s
b10 B
b10 k
0C
0<
0=
19
08
bx @
bx n
b1010 o
b0 +
b0 j
b100100 1
b10 *
b10 z
b10 -
b10 x
b10 ("
b11111 )
b11111 {
b1101 ,
b1101 y
b1101 )"
b100 .
b10000000100100 (
b10000000100100 0
b10 7
1?
1:
1>
b11111 $
b11111 }
b101000 f
b10011010010000000100100 `
b101000 _
1X
1U
0V
1T
b10 [
b10 #"
b10 '"
b10 ]
0N
0K
1L
0J
b11100 M
b11100 m
b11100 O
b11100 !"
b10010 H
b10010 l
1c
b1110 e
b1110 |
b1110 $"
b1110 a
b11111 b
1!
#145000
b11111 F"
0!
#150000
b11100 @
b11100 n
b10010 G
b10010 t
04
b10010 D
b10010 w
18
b10010 $
b10010 }
b0 E
b0 i
b0 v
b100 7
0?
0:
0>
b10 3
b10 %"
b11111 F
b11111 u
b100100 h
0d
0c
b11100 e
b11100 |
b11100 $"
b10010 a
bx b
1N
1K
0L
1J
b10 M
b10 m
b10 O
b10 !"
0X
0U
0T
0Q
b10 R
b10 g
1W
b1101 [
b1101 #"
b1101 '"
b10 Z
b10 ""
b100 Y
b10000000100100 ^
b11111 ]
b10 \
1!
#155000
0!
#160000
b11100 D
b11100 w
b100000100100100000100000 /
b100000100100100000100000 s
bx @
bx n
b11100 G
b11100 t
b11100 $
b11100 }
b1011 o
b100101 1
b100 *
b100 z
b100 -
b100 x
b100 ("
b11000 )
b11000 {
b1000 ,
b1000 y
b1000 )"
b10000000100101 (
b10000000100101 0
b1 3
b1 %"
b101100 f
b100010000010000000100101 `
b101100 _
1X
0N
0K
0J
b11111 M
b11111 m
b100 O
b100 !"
1d
1c
b10 e
b10 |
b10 $"
b11100 b
1!
#165000
b11100 ."
0!
#170000
b11100 D
b11100 w
b11000 F
b11000 u
b100010011110100000101010 /
b100010011110100000101010 s
b1 E
b1 i
b1 v
b10010 $
b10010 }
b10 3
b10 %"
b100101 h
b100000 1
b11100 )
b11100 {
b10 ,
b10 y
b10 )"
b1001 .
b100100000100000 (
b100100000100000 0
b1100 o
0d
0c
b100 e
b100 |
b100 $"
bx b
1N
b11100 H
b11100 l
b1000 [
b1000 #"
b1000 '"
b100 Z
b100 ""
b10000000100101 ^
b11000 ]
b100 \
b100000100100100000100000 `
b110000 _
b110000 f
1!
#175000
0!
#180000
b111000 D
b111000 w
b10001101010000100000000000001000 /
b10001101010000100000000000001000 s
b11100 F
b11100 u
b10 E
b10 i
b10 v
b1101 o
b101010 1
b101 )
b101 {
b1001 ,
b1001 y
b1001 )"
b11101 .
b11111111111111111110100000101010 (
b1110100000101010 0
b1001 7
b100000 h
b11100 $
b11100 }
b110100 f
b100010011110100000101010 `
b110100 _
b10 [
b10 #"
b10 '"
b1001 Y
b100100000100000 ^
b11100 ]
b11000 M
b11000 m
1d
b11100 a
1!
#185000
b11100 2"
b11100 *
b11100 z
0!
#190000
04
b1 D
b1 w
b111000 F
b111000 u
b101010001100000000 /
b101010001100000000 s
b111 E
b111 i
b111 v
b0 B
b0 k
1C
1<
1=
09
b10 2
b10 &"
b0 3
b0 %"
b11101 7
b101010 h
b100011 +
b100011 j
b1000 1
b1010 *
b1010 z
b1010 -
b1010 x
b1010 ("
b11100 )
b11100 {
b10 ,
b10 y
b10 )"
b0 .
b1000 (
b1000 0
b1110 o
b11100 M
b11100 m
b1001 O
b1001 !"
b111000 H
b111000 l
b1001 [
b1001 #"
b1001 '"
b11101 Y
b11111111111111111110100000101010 ^
b101 ]
b11100 \
b10001101010000100000000000001000 `
b111000 _
b111000 f
1!
#195000
b11100 2"
0!
#200000
b10010 D
b10010 w
b11101101001011000000000100 /
b11101101001011000000000100 s
b1010 G
b1010 t
b10 B
b10 k
0C
0<
0=
19
08
b1000 F
b1000 u
b1111 o
b0 +
b0 j
b0 1
b0 *
b0 z
b0 -
b0 x
b0 ("
b10100 .
b11111111111111111010001100000000 (
b1010001100000000 0
b10 E
b10 i
b10 v
1?
1:
1>
b10 7
b1000 h
b0 2
b0 &"
b111000 $
b111000 }
b111100 f
b101010001100000000 `
b111100 _
1U
1T
1Q
b0 R
b0 g
0W
b10 [
b10 #"
b10 '"
b1010 Z
b1010 ""
b0 Y
b1000 ^
b11100 ]
b1010 \
b101 M
b101 m
b11101 O
b11101 !"
b1 H
b1 l
b1001 e
b1001 |
b1001 $"
b111000 a
1!
#205000
b111000 <"
0!
#210000
04
b10010000000000000 D
b10010000000000000 w
b11100 @
b11100 n
18
b1100 G
b1100 t
b10100 7
b1 $
b1 }
0?
0:
0>
b100 E
b100 i
b100 v
1'
b10 2
b10 &"
b1100 5
b1100 6
b10010 F
b10010 u
b0 h
b11101 e
b11101 |
b11101 $"
b1 a
1K
1J
b11100 M
b11100 m
b10 O
b10 !"
b10010 H
b10010 l
0X
0U
0T
0Q
b10 R
b10 g
1W
b0 Z
b0 ""
b10100 Y
b11111111111111111010001100000000 ^
b0 \
1!
#215000
b1 d"
0!
#220000
b11100000000000000 D
b11100000000000000 w
b100010110101101111111110011100 /
b100010110101101111111110011100 s
b11100 F
b11100 u
bx @
bx n
b10000 o
b100 1
b1 *
b1 z
b11101 -
b11101 x
b11101 ("
b10100 )
b10100 {
b10100 ,
b10100 y
b10100 )"
b10110 .
b11111111111111111011000000000100 (
b1011000000000100 0
b1 2
b1 &"
b11100 $
b11100 }
b1000000 f
b11101101001011000000000100 `
b1000000 _
1X
0N
0K
0J
b10100 O
b10100 !"
b10010000000000000 H
b10010000000000000 l
1c
b10 e
b10 |
b10 $"
b10010 a
b11100 b
1!
#225000
b11100 ."
0!
#230000
b111000000000000000 D
b111000000000000000 w
b11100000000000000 F
b11100000000000000 u
bx /
bx s
b1 G
b1 t
0'
b0 B
b0 k
1C
09
b10010000000000000 $
b10010000000000000 }
b10 2
b10 &"
b10110 7
b0 5
b0 6
b100 h
b1000 +
b1000 j
b11100 1
b10110 *
b10110 z
b10110 -
b10110 x
b10110 ("
b10110 )
b10110 {
b10110 ,
b10110 y
b10110 )"
b11111 .
b11111111111111111111111110011100 (
b1111111110011100 0
b10001 o
0d
0c
b10100 e
b10100 |
b10100 $"
b10010000000000000 a
bx b
1N
b11100000000000000 H
b11100000000000000 l
b10100 [
b10100 #"
b10100 '"
b11101 Z
b11101 ""
b10110 Y
b11111111111111111011000000000100 ^
b10100 ]
b1 \
b100010110101101111111110011100 `
b1000100 _
b1000100 f
1!
#235000
0!
#240000
b110111111110011100 D
b110111111110011100 w
08
b111000000000000000 G
b111000000000000000 t
0%
0C
b11111111111111111111111110011100 F
b11111111111111111111111110011100 u
b10010 o
bx +
bx j
bx 1
bx *
bx z
bx -
bx x
bx ("
bx )
bx {
bx ,
bx y
bx )"
bx .
bx (
bx 0
b10 E
b10 i
b10 v
b10110 7
b11110 5
b11110 6
b11100 h
b10 3
b10 %"
b11100000000000000 $
b11100000000000000 }
b1001000 f
bx `
b1001000 _
1Q
b0 R
b0 g
0W
b10110 [
b10110 #"
b10110 '"
b10110 Z
b10110 ""
b11111 Y
b11111111111111111111111110011100 ^
b10110 ]
b10110 \
b10100 M
b10100 m
b10110 O
b10110 !"
b111000000000000000 H
b111000000000000000 l
1d
b11100000000000000 a
1!
#245000
b11100000000000000 R"
0!
#250000
x4
bx D
bx w
bx G
bx t
b111000000000000000 $
b111000000000000000 }
bx 7
b0 2
b0 &"
b0 3
b0 %"
b0xxxxx 5
bx 6
bx F
bx u
bx h
b10011 o
b10110 e
b10110 |
b10110 $"
b111000000000000000 a
b10110 M
b10110 m
b110111111110011100 H
b110111111110011100 l
0X
0Q
bx [
bx #"
bx '"
bx Z
bx ""
bx Y
bx ^
bx ]
bx \
b1001100 _
b1001100 f
1!
#255000
b111000000000000000 V"
0!
#260000
b10100 o
b110111111110011100 $
b110111111110011100 }
b1010000 f
b1010000 _
0N
xP
bx M
bx m
bx O
bx !"
bx H
bx l
b110111111110011100 a
1!
#265000
b110111111110011100 V"
0!
#270000
bx $
bx }
b10101 o
0d
bx e
bx |
bx $"
bx a
b1010100 _
b1010100 f
1!
#275000
0!
#280000
b10110 o
b1011000 f
b1011000 _
1!
#285000
0!
#290000
b10111 o
b1011100 _
b1011100 f
1!
#295000
0!
#300000
b11000 o
b1100000 f
b1100000 _
1!
