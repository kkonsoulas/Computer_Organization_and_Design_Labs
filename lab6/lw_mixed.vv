`timescale 1ns/1ps
`define clock_period  10
module lwmixed;

    integer   i, test, fail;
     reg       clock, reset; 


    cpu cpu0(clock, reset);

     
  always 
     #(`clock_period / 2) clock = ~clock; 


  initial begin  

     $dumpfile("mixedlw_dumpfile.vcd");
     $dumpvars(0, lwmixed);

  for (i = 0; i < 32; i = i + 1) begin
    $dumpvars(1, lwmixed.cpu0.cpu_regs.data[i]);
    $dumpvars(1, lwmixed.cpu0.cpu_IMem.data[i]);

  end

    clock = 1'b0;       
    reset = 1'b0;
    test  = 32'bz;
    fail  = 0;

     // 15. LW STALL MIX
    for (i = 0; i < 32; i = i+1) cpu0.cpu_regs.data[i] = 32'bx;
    for (i = 0; i < 32; i = i+1) cpu0.cpu_IMem.data[i] = 32'bx;     
    #(3*`clock_period) 
    for (i = 0; i < 32; i = i+1) cpu0.cpu_regs.data[i] = i; 
    cpu0.cpu_DMem.data[10] = 10; 
    //                         opcode    rs   rt    rd   shamt  func
    cpu0.cpu_IMem.data[0] = 32'b000000_00010_00011_00001_00000_100000;  // add $1, $2, $3
    cpu0.cpu_IMem.data[1] = 32'b100011_01010_00010_0000000000000000;    // lw  $2, 0($10) 
    cpu0.cpu_IMem.data[2] = 32'b100011_00010_00011_0000000000000000;    // lw  $3, 0($2)  
    cpu0.cpu_IMem.data[3] = 32'b000000_00010_00011_00100_00000_100000;  // add $4, $2, $3
    cpu0.cpu_IMem.data[4] = 32'b000000_00011_00100_00101_00000_100000;  // add $5, $3, $4
    #(0.23*`clock_period) 
    reset = 1'b1;
    test = test +1;
    #(13*`clock_period)
    $display ("%2d LW STALL MIX",test);   
    if (cpu0.cpu_regs.data[1] == 32'd5  && 
        cpu0.cpu_regs.data[2] == 32'd10 && 
        cpu0.cpu_regs.data[3] == 32'd10 && 
        cpu0.cpu_regs.data[4] == 32'd20 && 
        cpu0.cpu_regs.data[5] == 32'd30 )
                $display ("%2d :  PASS", test);
    else  begin $display ("%2d :  FAIL", test); fail = fail + 1; 
    $display("reg1 = %d\nreg2 = %d\nreg3 = %d\nreg4 = %d\nreg5 = %d",cpu0.cpu_regs.data[1],cpu0.cpu_regs.data[2],cpu0.cpu_regs.data[3],cpu0.cpu_regs.data[4],cpu0.cpu_regs.data[5]);end  
    #(`clock_period) 
    reset = 1'b0; 


  $display ("Score = %2d / %2d ", test - fail, test);  

  #(`clock_period)  $finish;


 end 
endmodule
